// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MSGRECEIVEDSCHEMA_SIVERTAPI_MSGRECEIVED_H_
#define FLATBUFFERS_GENERATED_MSGRECEIVEDSCHEMA_SIVERTAPI_MSGRECEIVED_H_

#include "flatbuffers/flatbuffers.h"

namespace SivertAPI {
namespace MsgReceived {

struct Vec3Rx;

struct PacketInfo;

struct MsgRecAPI;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) Vec3Rx FLATBUFFERS_FINAL_CLASS {
 private:
  double x_;
  double y_;
  double z_;

 public:
  Vec3Rx() {
    memset(static_cast<void *>(this), 0, sizeof(Vec3Rx));
  }
  Vec3Rx(double _x, double _y, double _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  double x() const {
    return flatbuffers::EndianScalar(x_);
  }
  double y() const {
    return flatbuffers::EndianScalar(y_);
  }
  double z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Vec3Rx, 24);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) PacketInfo FLATBUFFERS_FINAL_CLASS {
 private:
  uint32_t senderID_;
  uint32_t receiverID_;
  int64_t timeReceived_;
  uint8_t sent_;
  int8_t padding0__;  int16_t padding1__;  int32_t padding2__;

 public:
  PacketInfo() {
    memset(static_cast<void *>(this), 0, sizeof(PacketInfo));
  }
  PacketInfo(uint32_t _senderID, uint32_t _receiverID, int64_t _timeReceived, bool _sent)
      : senderID_(flatbuffers::EndianScalar(_senderID)),
        receiverID_(flatbuffers::EndianScalar(_receiverID)),
        timeReceived_(flatbuffers::EndianScalar(_timeReceived)),
        sent_(flatbuffers::EndianScalar(static_cast<uint8_t>(_sent))),
        padding0__(0),
        padding1__(0),
        padding2__(0) {
    (void)padding0__;    (void)padding1__;    (void)padding2__;
  }
  uint32_t senderID() const {
    return flatbuffers::EndianScalar(senderID_);
  }
  uint32_t receiverID() const {
    return flatbuffers::EndianScalar(receiverID_);
  }
  int64_t timeReceived() const {
    return flatbuffers::EndianScalar(timeReceived_);
  }
  bool sent() const {
    return flatbuffers::EndianScalar(sent_) != 0;
  }
};
FLATBUFFERS_STRUCT_END(PacketInfo, 24);

struct MsgRecAPI FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POS = 4,
    VT_PACKCONTENT = 6,
    VT_MSGCONTENT = 8
  };
  const Vec3Rx *pos() const {
    return GetStruct<const Vec3Rx *>(VT_POS);
  }
  const PacketInfo *PackContent() const {
    return GetStruct<const PacketInfo *>(VT_PACKCONTENT);
  }
  const flatbuffers::String *MsgContent() const {
    return GetPointer<const flatbuffers::String *>(VT_MSGCONTENT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Vec3Rx>(verifier, VT_POS) &&
           VerifyField<PacketInfo>(verifier, VT_PACKCONTENT) &&
           VerifyOffset(verifier, VT_MSGCONTENT) &&
           verifier.VerifyString(MsgContent()) &&
           verifier.EndTable();
  }
};

struct MsgRecAPIBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pos(const Vec3Rx *pos) {
    fbb_.AddStruct(MsgRecAPI::VT_POS, pos);
  }
  void add_PackContent(const PacketInfo *PackContent) {
    fbb_.AddStruct(MsgRecAPI::VT_PACKCONTENT, PackContent);
  }
  void add_MsgContent(flatbuffers::Offset<flatbuffers::String> MsgContent) {
    fbb_.AddOffset(MsgRecAPI::VT_MSGCONTENT, MsgContent);
  }
  explicit MsgRecAPIBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MsgRecAPIBuilder &operator=(const MsgRecAPIBuilder &);
  flatbuffers::Offset<MsgRecAPI> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MsgRecAPI>(end);
    return o;
  }
};

inline flatbuffers::Offset<MsgRecAPI> CreateMsgRecAPI(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Vec3Rx *pos = 0,
    const PacketInfo *PackContent = 0,
    flatbuffers::Offset<flatbuffers::String> MsgContent = 0) {
  MsgRecAPIBuilder builder_(_fbb);
  builder_.add_MsgContent(MsgContent);
  builder_.add_PackContent(PackContent);
  builder_.add_pos(pos);
  return builder_.Finish();
}

inline flatbuffers::Offset<MsgRecAPI> CreateMsgRecAPIDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Vec3Rx *pos = 0,
    const PacketInfo *PackContent = 0,
    const char *MsgContent = nullptr) {
  auto MsgContent__ = MsgContent ? _fbb.CreateString(MsgContent) : 0;
  return SivertAPI::MsgReceived::CreateMsgRecAPI(
      _fbb,
      pos,
      PackContent,
      MsgContent__);
}

inline const SivertAPI::MsgReceived::MsgRecAPI *GetMsgRecAPI(const void *buf) {
  return flatbuffers::GetRoot<SivertAPI::MsgReceived::MsgRecAPI>(buf);
}

inline const SivertAPI::MsgReceived::MsgRecAPI *GetSizePrefixedMsgRecAPI(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<SivertAPI::MsgReceived::MsgRecAPI>(buf);
}

inline bool VerifyMsgRecAPIBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SivertAPI::MsgReceived::MsgRecAPI>(nullptr);
}

inline bool VerifySizePrefixedMsgRecAPIBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SivertAPI::MsgReceived::MsgRecAPI>(nullptr);
}

inline void FinishMsgRecAPIBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<SivertAPI::MsgReceived::MsgRecAPI> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMsgRecAPIBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<SivertAPI::MsgReceived::MsgRecAPI> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace MsgReceived
}  // namespace SivertAPI

#endif  // FLATBUFFERS_GENERATED_MSGRECEIVEDSCHEMA_SIVERTAPI_MSGRECEIVED_H_
